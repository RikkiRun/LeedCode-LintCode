Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


https://www.youtube.com/watch?v=zT28AwRNTaQ

// way 1: time O(n), space O(n)
class Solution {
    public int maxSubArray(int[] nums) {
        int[] dp = new int[nums.length];
        dp[0] = nums[0];
        int res = nums[0];
        
        for (int i = 1; i < nums.length; i ++){
            dp[i] = nums[i] + (dp[i - 1] < 0 ? 0 : dp[i - 1]);
            res = Math.max(res, dp[i]);
        }
        
        return res;
    }
}


// way 2: time O(n), space O(1)
class Solution {
    public int maxSubArray(int[] nums) {
        int res = nums[0];
		int sum = nums[0];
		for (int i = 1; i < nums.lenghth - 1; i ++){
			sum = Math.max(nums[i], nums[i] + sum);
			res = Math.max(res, sum)
		}
        }
        
        return res;
    }
}
