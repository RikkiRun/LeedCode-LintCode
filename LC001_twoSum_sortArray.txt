Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

sorted time: O(n)
sorted space: O(1)


class Solution {
    public int[] twoSum(int[] nums, int target) {
        if (nums == null || nums.length <=1) return new int[2];
        Arrays.sort(nums); //数组排序
        int left = 0;
        int right = nums.length - 1;
        while (left<right){
            int sum = nums[left] + nums[right];
            if (sum<target){
                left++;
            }else if (sum>target){
                right--;
            }else{
                return new int[] {left,right};
            }
        }
        return new int[2];        
    }
}



Class solution{
	public int[] twoSum(int[] nums, int target){
		if (nums == null||nums.length<=1) return new int[2];
		int left = 0;
		int right = nums.length - 1;
		while(left<right){
			int sum = nums[left] + nums[right];
			if(sum<target){
				left++;
			}else if(sum>target){
				right--;
			}else{
				return new int[] {left,right}
			}
		}
		return new int[2]'
	}
}