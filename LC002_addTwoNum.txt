链表（linked list）
--只知道头节点

https://www.youtube.com/watch?v=LNWDFdYGS08

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
Explanation: 342 + 465 = 807.

逐个加法，考虑进位 Int addOne = 0;


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
class Solution {
    public static ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        if(l1 == null || l2 == null) return null; //edge case
		ListNode dummy = new ListNode (val:0); //tricky
		LiseNode head = dummy;
		itn addOne = 0;
		while (l1 != null || l2 != null || addOne !=0) {
			int val1 = l1 == null?0:l1.val;
			int val2 = l2 == null?0:l2.val;
			int sum = val1 + val2 + addOne;
			head.next = new ListNode(val: sum%10);
			head = head.next;
			addOne = sum / 10;
			if (l1 != null) li = l1.next;
			if (l2 != null) l2 = l2.next;
		}		
		return dummy.next;
    }
	
	public static class ListNode {
		int val;
		ListNode next;
		public ListNode(int val){
			this.val = val;
		}
		public static String print(ListNode l){
			StringBuilder sb = new StringBuilder();
			while (l != null){
				ab.append(l.val);
				l = l.next;
			}
			return sb.toString();
		}
	}
}

//testcase
public static void main(String[] args){
	ListNode l1 = new ListNode(val:2);
	ListNode l2 = new ListNode(val:5);
	l1.next = new LiseNode(val:4);
	l2.next = new LiseNode(val:6);
	Systen.out.println(ListNode.print(addTwoNumbers(l1,l2)));
}
