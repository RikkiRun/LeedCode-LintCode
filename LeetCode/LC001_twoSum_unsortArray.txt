Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].


sort的时间复杂度： O(nlogn)
用HashMap -- lookup time O(1), update store O(1)

先用sum-现有的树，在Map中寻找差值，若没有的话就放心Map中

代码：

public class Solution{
	public int[] twoSum(int[] nums, int target){
		//建立map
		Map<Integer, Integer> map = new HashMap<>(); //map只能存object,所以要用Integer而不是int
		//遍历数组
		for (int i = 0; i<nums.length; i++){
			int desired = target - nums[i];
			if (map.containsKey(desired)){
				return new int[] {map.get(desired), i};
			}else{
				map.put(nums[i],i); //把这个数放进map
			}
		}
		return new int[2];
	}
}


Map<Integer, Integer> map = new HashMap<>();
for(int i = 0; i<nums.length; i++){
	int desired = target - nums[i];
	if (map.containsKey(desired)){
		return new int[] {map.get(desired), i};
	}else {
		map.put(nums[i],i);
	}
}
return new int[2];

